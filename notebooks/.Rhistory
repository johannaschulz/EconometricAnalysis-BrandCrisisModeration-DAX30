install.packages("writexl")
library("writexl")
library("writexl")
writexl::write_xlsx(final_table, path = "regression_coefficients.xlsx")
library("writexl")
output_path <- "../outputs/regression_coefficients.xlsx"
writexl::write_xlsx(final_table, path = output_path)
# Robust t test
coeftest_results <- coeftest(linreg_1_0_period, vcov = vcovHC(linreg_1_0_period, type = "HC0"))
# Robust t test
coeftest_results <- coeftest(linreg_1_0_period, vcov = vcovHC(linreg_1_0_period, type = "HC0"))
linreg_1_0_period <- lm(VWAP ~ Crisis + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_1_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_1_0_period, vcov = vcovHC(linreg_1_0_period, type = "HC0"))
print(coeftest_results)
linreg_1_1_period <- lm(VWAP ~ CPI + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_1_1_period)
# Robust t test
coeftest_results <- coeftest(linreg_1_1_period, vcov = vcovHC(linreg_1_1_period, type = "HC0"))
print(coeftest_results)
linreg_2_0_period <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_2_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_2_0_period, vcov = vcovHC(linreg_2_0_period, type = "HC0"))
print(coeftest_results)
linreg_2_1_period <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_2_1_period)
# Robust t test
coeftest_results <- coeftest(linreg_2_1_period, vcov = vcovHC(linreg_2_1_period, type = "HC0"))
print(coeftest_results)
linreg_3_0_period <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_3_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_3_0_period, vcov = vcovHC(linreg_3_0_period, type = "HC0"))
print(coeftest_results)
linreg_3_1_period <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_3_1_period)
# Model 1.0 without controls, Crisis as IV
linreg1_0 <- lm(VWAP ~ Crisis, data = data)
summary(linreg1_0)
# Adding 1 control: Sector Information
linreg1_0 <- lm(VWAP ~ Crisis + Sector, data = data)
summary(linreg1_0)
# Adding 2nd control: TR
linreg1_0 <- lm(VWAP ~ Crisis + Sector + TR, data = data)
summary(linreg1_0)
# Adding 3rd control: EBIT
linreg1_0_ <- lm(VWAP ~ Crisis + Sector + TR + EBIT, data = data)
summary(linreg1_0)
# Finally: Adding 4th control: lagged VWAP
# Model 1.0 with controls, Crisis as IV
linreg1_0 <- lm(VWAP ~ Crisis + Sector + TR + EBIT + VWAP_lagged, data = data)
summary(linreg1_0)
# Model 1.1 without controls, CPI as IV
linreg1_1 <- lm(VWAP ~ CPI, data = data)
summary(linreg1_1)
# stepwise control adding
linreg1_1_ <- lm(VWAP ~ CPI + Sector + TR + EBIT, data = data)
summary(linreg1_1_)
# Robust t test
coeftest_results <- coeftest(linreg_2_0_period, vcov = vcovHC(linreg_2_0_period, type = "HC0"))
print(coeftest_results)
install.packages("readxl")
library(readxl)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("dplyr")
library(dplyr)
install.packages("lmtest")
library(lmtest)
install.packages("tidyverse")
library(tidyverse)
install.packages("tseries")
library(tseries)
install.packages("car")
library(car)
install.packages("plm")
library(plm)
install.packages("ggtext")
library(ggtext)
install.packages("reshape2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("readxl")
library(readxl)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggcorrplot")
library(ggcorrplot)
install.packages("dplyr")
library(dplyr)
install.packages("lmtest")
library(lmtest)
install.packages("tidyverse")
library(tidyverse)
install.packages("tseries")
library(tseries)
install.packages("car")
install.packages("dplyr")
library(car)
install.packages("plm")
install.packages("ggplot2")
library(plm)
install.packages("ggtext")
library(ggtext)
install.packages("reshape2")
library(reshape2)
install.packages("broom")
library(broom)
install.packages("writexl")
library(writexl)
install.packages("writexl")
install.packages("broom")
file_path <- "../outputs/monthly_vwap_brand_CPI_data.xlsx"
data <- read_excel(file_path)
file_path <- "../outputs/monthly_vwap_brand_CPI_data.xlsx"
data <- read_excel(file_path)
head(data)
str(data) # I inspect the data types of the variables and will make some changes now#
data$Industry <- as.factor(data$Industry) # because it is a categorical variable
data$Sector <- as.factor(data$Sector) # same applies as above
data$StrongBrand <- as.factor(data$StrongBrand) # dummy variable, therefore factor type is better than numerical
data$MultipleStrongBrands <- as.factor(data$MultipleStrongBrands) # same applies as above
data$Crisis <- as.factor(data$Crisis) # same applies as above
# Convert data to a pdata.frame, 'CompanyName' and 'MonthYear' are cross-sectional and time identifiers
pdata <- pdata.frame(data, index = c("CompanyName", "MonthYear"))
# Correlation between VWAP and other numerical variables
data_corr <- data[, c("VWAP", "BrandRanking", "CPI", "TR", "EBIT", "EBITDA", "VWAP_lagged")]
corr_matrix <- cor(data_corr, use = "complete.obs")
corr_matrix
library(ggplot2)
library(reshape2)
library(ggcorrplot)
# Compute the correlation matrix
data_corr <- data[, c("VWAP", "BrandRanking", "CPI", "TR", "EBIT", "VWAP_lagged")]
corr_matrix <- cor(data_corr, use = "complete.obs")
# Transform the correlation matrix into a long format
corr_long <- melt(corr_matrix)
# Create a heatmap with correlation values, Times New Roman font, a descriptive title, and no axis titles
ggplot(corr_long, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label = round(value, 3)), color = "black", size = 3, family = "Times New Roman") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlation") +
labs(title = "Correlation Heatmap",
x = "",
y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, family = "Times New Roman"),
axis.text.y = element_text(family = "Times New Roman"),
plot.title = element_text(family = "Times New Roman", hjust = 0.5, size = 12),
plot.subtitle = element_text(family = "Times New Roman"),
plot.caption = element_text(family = "Times New Roman"),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman")) +
coord_fixed()
ggplot(data, aes(x = CPI, y = VWAP)) +
geom_point() +
labs(title = "Scatter Plot of VWAP vs CPI", x = "CPI", y = "VWAP") +
theme_minimal()
# colored by TickerCode
ggplot(data, aes(x = CPI, y = VWAP, color = TickerCode)) +
geom_point() +
labs(title = "Scatter Plot of VWAP vs CPI by Company", x = "CPI", y = "VWAP") +
theme_minimal() +
theme(legend.position = "bottom")
library(ggplot2)
# Convert MonthYear to Date
data$MonthYear <- as.Date(data$MonthYear)
# Create the time series plot with base month lines
cpi_plot <- ggplot(data, aes(x = MonthYear, y = CPI)) +
geom_line() +
geom_vline(xintercept = as.Date("2019-12-01"), linetype = "dotted", color = "grey") +
geom_hline(yintercept = 100, color = "grey") +
labs(title = "Time Series of CPI per Month",
x = "Month-Year",
y = "CPI (Base: December 2019 = 100)") +
theme_minimal() +
theme(text = element_text(family = "Times New Roman"),
axis.text.x = element_text(angle = 45, hjust = 1, family = "Times New Roman"),
axis.text.y = element_text(family = "Times New Roman"),
plot.title = element_text(family = "Times New Roman", hjust = 0.5))
cpi_plot
ggsave("CPI_Time_Series.png", plot = cpi_plot, width = 10, height = 6, dpi = 300)
# Summary of VWAP by StrongBrand
data %>%
group_by(StrongBrand) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE),
Median_VWAP = median(VWAP, na.rm = TRUE),
SD_VWAP = sd(VWAP, na.rm = TRUE))
# Summary of VWAP by MutlipleBrands
data %>%
group_by(MultipleStrongBrands) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE),
Median_VWAP = median(VWAP, na.rm = TRUE),
SD_VWAP = sd(VWAP, na.rm = TRUE))
# Summary of VWAP by Crisis
data %>%
group_by(Crisis) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE),
Median_VWAP = median(VWAP, na.rm = TRUE),
SD_VWAP = sd(VWAP, na.rm = TRUE))
library(dplyr)
# mean of VWAP for each level of Crisis
mean_vwap_by_crisis <- data %>%
group_by(Crisis) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE))
print(mean_vwap_by_crisis)
# mean of VWAP for each combination of Crisis and StrongBrand
mean_vwap_by_crisis_strongbrand <- data %>%
group_by(Crisis, StrongBrand) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE))
print(mean_vwap_by_crisis_strongbrand)
library(dplyr)
# Calculate the count of companies for each StrongBrand category
company_count <- data %>%
group_by(StrongBrand) %>%
summarise(Count = n_distinct(CompanyName))
print(company_count)
# visualisation of the information from above, not used in the thesis
library(dplyr)
library(ggplot2)
mean_vwap_data <- data %>%
group_by(StrongBrand, Crisis) %>%
summarise(Mean_VWAP = mean(VWAP, na.rm = TRUE)) %>%
mutate(Category = factor(paste("StrongBrand =", StrongBrand, "- Crisis =", Crisis),
levels = c("StrongBrand = 1 - Crisis = 0",
"StrongBrand = 1 - Crisis = 1",
"StrongBrand = 0 - Crisis = 0",
"StrongBrand = 0 - Crisis = 1")))
library(ggtext)
custom_labels <- c("Crisis = 0<br><span style='margin-top:10px; display:block; text-align:center;'><strong>Strong Brand = 1</strong></span>",
"",
"Crisis = 0<br><span style='margin-top:10px; display:block; text-align:center;'><strong>Strong Brand = 0</strong></span>",
"")
ggplot(mean_vwap_data, aes(x = Category, y = Mean_VWAP, fill = Category)) +
geom_bar(stat = "identity", position = position_dodge(), width = 0.6) +
scale_fill_grey(start = 0.8, end = 0.5) +
geom_text(aes(label = round(Mean_VWAP, 2)), vjust = -0.5, position = position_dodge(width = 0.6)) +
labs(title = "Mean VWAP Values by StrongBrand and Crisis Status",
x = "",
y = "Mean VWAP") +
scale_x_discrete(labels = custom_labels) +
theme_minimal() +
theme(legend.position = "none",
axis.text.x = element_markdown())
# Model 1.0 without controls, Crisis as IV
linreg1_0 <- lm(VWAP ~ Crisis, data = data)
summary(linreg1_0)
# Adding 1 control: Sector Information
linreg1_0 <- lm(VWAP ~ Crisis + Sector, data = data)
summary(linreg1_0)
# Adding 2nd control: TR
linreg1_0 <- lm(VWAP ~ Crisis + Sector + TR, data = data)
summary(linreg1_0)
# Adding 3rd control: EBIT
linreg1_0_ <- lm(VWAP ~ Crisis + Sector + TR + EBIT, data = data)
summary(linreg1_0)
# Finally: Adding 4th control: lagged VWAP
# Model 1.0 with controls, Crisis as IV
linreg1_0 <- lm(VWAP ~ Crisis + Sector + TR + EBIT + VWAP_lagged, data = data)
summary(linreg1_0)
library(lmtest)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg1_0_) #significant, assumption violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg1_0_) # not significant, assumption holds
# 3.1 Normaldistributuon of errors -> Plotting residuals against time
plot(residuals(linreg1_0_) ~ data$MonthYear) # random, assumption holds
library(tseries)
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg1_0_)) # slighlty significant -> VIOLATED
library(carData)
# 4. No multicollinearity -> VIF values of 5-10 indicate a strong correlation
vif(linreg1_0)
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
library(lmtest)
library(sandwich)
# Robust t test
coeftest_results <- coeftest(linreg1_0, vcov = vcovHC(linreg1_0, type = "HC0"))
print(coeftest_results)
# Model 1.1 without controls, CPI as IV
linreg1_1 <- lm(VWAP ~ CPI, data = data)
summary(linreg1_1)
# stepwise control adding
linreg1_1 <- lm(VWAP ~ CPI + Sector, data = data)
summary(linreg1_1)
# stepwise control adding
linreg1_1 <- lm(VWAP ~ CPI + Sector + TR, data = data)
summary(linreg1_1)
# stepwise control adding
linreg1_1_ <- lm(VWAP ~ CPI + Sector + TR + EBIT, data = data)
summary(linreg1_1_)
# Model 1.1 with all controls, CPI as IV
linreg1_1 <- lm(VWAP ~ CPI + Sector + TR + EBIT + VWAP_lagged, data = data)
summary(linreg1_1)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg1_1_) #significant, assumption violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg1_1_) # not significant, assumption holds
# 3.1 Normal distribution of errors -> Plotting residuals against time
plot(residuals(linreg1_1_) ~ data$MonthYear) # random, assumption holds
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg1_1_)) # slightly significant -> VIOLATED
# 4. No (strong) multicollinearity ->
vif(linreg1_1)
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
# Robust t test
coeftest_results <- coeftest(linreg1_1, vcov = vcovHC(linreg1_1, type = "HC0"))
print(coeftest_results)
# without controls
linreg_2_0 <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand), data = data)
summary(linreg_2_0)
# stepwise control adding
linreg_2_0 <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector, data = data)
summary(linreg_2_0)
# stepwise control adding
linreg_2_0 <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector + TR, data = data)
summary(linreg_2_0)
# stepwise control adding
linreg_2_0_ <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector + TR + EBIT, data = data)
summary(linreg_2_0_)
# with all controls
linreg_2_0 <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector + EBIT + TR + VWAP_lagged, data = data)
summary(linreg_2_0)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg_2_0_) #significant, assumption violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg_2_0_) # not significant, assumption holds
# 3.1 Normal distribtion of errors -> Plotting residuals against time
plot(residuals(linreg_2_0_) ~ data$MonthYear) # random, assumption holds
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg_2_0_)) #significant -> VIOLATED
# 4. No multicollinearity -> VIF values not be higher than 5
vif(linreg_2_0, type ="predictor")
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
# Robust t test
coeftest_results <- coeftest(linreg_2_0, vcov = vcovHC(linreg_2_0, type = "HC0"))
print(coeftest_results)
# without controls
linreg_2_1 <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand), data = data)
summary(linreg_2_1)
# stepwise control adding
linreg_2_1 <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector, data = data)
summary(linreg_2_1)
# stepwise control adding
linreg_2_1 <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector + TR , data = data)
summary(linreg_2_1)
# stepwise control adding
linreg_2_1_ <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector + TR + EBIT, data = data)
summary(linreg_2_1_)
# with controls
linreg_2_1 <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector + TR + EBIT + VWAP_lagged, data = data)
summary(linreg_2_1)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg_2_1_) #significant, assumption violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg_2_1_) # not significant, assumption holds
# 3.1 Normal distribtion of errors -> Plotting residuals against time
plot(residuals(linreg_2_1_) ~ data$MonthYear) # random, assumption holds
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg_2_1_)) #significant -> VIOLATED
# 4. No multicollinearity
vif(linreg_2_1, type ="predictor")
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
# Robust t test
coeftest_results <- coeftest(linreg_2_1, vcov = vcovHC(linreg_2_1, type = "HC0"))
print(coeftest_results)
subset_strongbrand <- subset(data, StrongBrand == 1)
head(subset_strongbrand)
# without controls
linreg_3_0 <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking), data = subset_strongbrand)
summary(linreg_3_0)
# stepwise control adding
linreg_3_0 <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector, data = subset_strongbrand)
summary(linreg_3_0)
# stepwise control adding
linreg_3_0 <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector + TR, data = subset_strongbrand)
summary(linreg_3_0)
# stepwise control adding
linreg_3_0_ <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector + TR + EBIT, data = subset_strongbrand)
summary(linreg_3_0_)
# with controls
linreg_3_0 <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_strongbrand)
summary(linreg_3_0)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg_3_0_) # significant, violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg_3_0_) # not significant, assumption holds
# 3.1 Normal distribtion of errors -> Plotting residuals against time
plot(residuals(linreg_3_0_) ~ subset_strongbrand$MonthYear) # random, assumption holds
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg_3_0_)) #significant -> VIOLATED
# 4. No multicollinearity
vif(linreg_3_0, type = "predictor")
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
# Robust t test
coeftest_results <- coeftest(linreg_3_0, vcov = vcovHC(linreg_3_0, type = "HC0"))
print(coeftest_results)
# without controls
linreg_3_1 <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking), data = subset_strongbrand)
summary(linreg_3_1)
# stepwise control adding
linreg_3_1 <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector, data = subset_strongbrand)
summary(linreg_3_1)
# stepwise control adding
linreg_3_1 <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector + TR, data = subset_strongbrand)
summary(linreg_3_1)
# stepwise control adding
linreg_3_1_ <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector + TR + EBIT, data = subset_strongbrand)
summary(linreg_3_1_)
# with controls
linreg_3_1 <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_strongbrand)
summary(linreg_3_1)
# 1. Nonzero expectation: Zero mean for errors -> Resest test
resettest(linreg_3_1_) #significant, assumption violated
# 2. Homoscedasticity: Constant variance for errors -> Goldfeld-Quandt Test
gqtest(linreg_3_1_) # not significant, assumption holds
# 3.1 Normal distribtion of errors -> Plotting residuals against time
plot(residuals(linreg_3_1_) ~ subset_strongbrand$MonthYear) # random, assumption holds
# 3.2 Errors distributed multivariate normal -> Jarque and Bera (1980)
jarque.bera.test(residuals(linreg_3_1_)) #significant -> VIOLATED
# 4. No multicollinearity
vif(linreg_3_1, type = "predictor")
# Finally, adding Heteroskedasticity Robust Standard Errors to the model to account for the violations
# Robust t test
coeftest_results <- coeftest(linreg_3_1, vcov = vcovHC(linreg_3_1, type = "HC0"))
print(coeftest_results)
library(dplyr)
# subset with observations from October 2019 to March 2020
subset_period <- data %>%
filter(MonthYear >= as.Date("2019-10-01") & MonthYear <= as.Date("2020-03-31"))
head(subset_period)
linreg_1_0_period <- lm(VWAP ~ Crisis + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_1_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_1_0_period, vcov = vcovHC(linreg_1_0_period, type = "HC0"))
print(coeftest_results)
linreg_1_1_period <- lm(VWAP ~ CPI + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_1_1_period)
# Robust t test
coeftest_results <- coeftest(linreg_1_1_period, vcov = vcovHC(linreg_1_1_period, type = "HC0"))
print(coeftest_results)
linreg_2_0_period <- lm(VWAP ~ Crisis + StrongBrand + (Crisis*StrongBrand) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_2_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_2_0_period, vcov = vcovHC(linreg_2_0_period, type = "HC0"))
print(coeftest_results)
linreg_2_1_period <- lm(VWAP ~ CPI + StrongBrand + (CPI*StrongBrand) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_2_1_period)
# Robust t test
coeftest_results <- coeftest(linreg_2_1_period, vcov = vcovHC(linreg_2_1_period, type = "HC0"))
print(coeftest_results)
linreg_3_0_period <- lm(VWAP ~ Crisis + BrandRanking + (Crisis*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_3_0_period)
# Robust t test
coeftest_results <- coeftest(linreg_3_0_period, vcov = vcovHC(linreg_3_0_period, type = "HC0"))
print(coeftest_results)
linreg_3_1_period <- lm(VWAP ~ CPI + BrandRanking + (CPI*BrandRanking) + Sector + TR + EBIT + VWAP_lagged, data = subset_period)
summary(linreg_3_1_period)
# Robust t test
coeftest_results <- coeftest(linreg_3_1_period, vcov = vcovHC(linreg_3_1_period, type = "HC0"))
print(coeftest_results)
library("broom")
# model results are transferred to a small data frame
linreg_1_0_period <- broom::tidy(linreg_1_0_period)
linreg_1_1_period <- broom::tidy(linreg_1_1_period)
linreg_2_0_period <- broom::tidy(linreg_2_0_period)
linreg_2_1_period <- broom::tidy(linreg_2_1_period)
linreg_3_0_period <- broom::tidy(linreg_3_0_period)
linreg_3_1_period <- broom::tidy(linreg_3_1_period)
# add model name as a column
linreg_1_0_period$model <- "Model 1.0"
linreg_1_1_period$model <- "Model 1.1"
linreg_2_0_period$model <- "Model 2.0"
linreg_2_1_period$model <- "Model 2.1"
linreg_3_0_period$model <- "Model 3.0"
linreg_3_1_period$model <- "Model 3.1"
# creation of one data frame
regression_table <- rbind(linreg_1_0_period, linreg_1_1_period, linreg_2_0_period,linreg_2_1_period, linreg_3_0_period, linreg_3_1_period )
final_table <- regression_table %>%
select(model, term, estimate, std.error, statistic, p.value)
print(final_table)
# save the table
library("writexl")
output_path <- "../outputs/regression_coefficients.xlsx"
writexl::write_xlsx(final_table, path = output_path)
